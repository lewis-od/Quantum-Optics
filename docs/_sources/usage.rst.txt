Usage
=====

To initialise the neural network, create an instance of the
:class:`~quoptics.network.NeuralNetwork` class:

.. code-block:: python

    from quoptics.network import NeuralNetwork

    net = NeuralNetwork(model_dir)

Where `model_dir` is a string containing the location of a directory. If the
directory does not exist, it will be created, and information about the trained
network will be saved there.

To train the network run:

.. code-block:: python

    net.train(train_file, steps)

Where :code:`train_file` is the location of a file generated by
`data/gen_data.py` which contains the training data and labels. The learning
rate of the network can be set by changing the value of
:code:`net.learning_rate`.

To load the trained network at a later date, simply initialise the
:class:`~quoptics.network.NeuralNetwork` instance with the same model directory.

When classifying states of the form:

.. math::
    \lvert \psi \rangle = \sum_{n=0}^{\infty} c_n \lvert n \rangle

they should be input to the network in the form of a numpy array, whose entries
are the modulus of the coefficients :math:`c_n`.

The :class:`quoptics.states` module contains some functions for generating
some useful types of state. The functions generate :class:`qutip.Qobj`
instances. To convert these to a format compatible with the neural network, use
the :func:`quoptics.states.to_numpy` function.

Once the state data is in the correct format, you can classify it using one of
the following methods:

* :func:`~quoptics.network.NeuralNetwork.classify`
* :func:`~quoptics.network.NeuralNetwork.classify_dist`
* :func:`~quoptics.network.NeuralNetwork.predict`

The integers labelling the classes are as follows:

+---------+---------------+
| Integer | Type of State |
+=========+===============+
|    0    |     Cat       |
+---------+---------------+
|    1    |    Zombie     |
+---------+---------------+
|    2    |  Squeezed Cat |
+---------+---------------+
|    3    |  Cubic Phase  |
+---------+---------------+
|    4    |      ON       |
+---------+---------------+
|    5    |    Useless    |
+---------+---------------+

The :func:`~quoptics.network.NeuralNetwork.predict` function expects an array
of states, and returns data in the same format as a
`Tensorflow Estimator <https://www.tensorflow.org/api_docs/python/tf/estimator/Estimator#predict>`_.
