=====
Usage
=====

---------------
Generating Data
---------------

The script at `data/gen_data.py` is for generating training/test/validation
data. From the `data` directory, run :code:`python3 gen_data.py` with any of the
following options:

.. code-block:: none

    gen_data.py [-h] [--training TRAINING] [--test TEST]
                 [--validation VALIDATION] [--truncation T] [--cutoff LEN]

    Generate data for training the neural network

    optional arguments:
    -h, --help            show this help message and exit
    --training TRAINING   Number of states to generate for training (default:
                          5000)
    --test TEST           Number of states to generate for testing (default:
                          2000)
    --validation VALIDATION
                          Number of states to generate for validation (default:
                          2000)
    --truncation T        Size of matrices to use when calculating states
                          (default: 80)
    --cutoff LEN          Length of state vectors generated (default: 25)

The value of truncation is the size of the matrices used when generating states,
and the cutoff value dictates how many entries of each state vector will be
saved. For example, with the default values, states will be generated with a
truncation of 80, but only the first 25 values will be saved for each state.

The script generates roughly equal numbers of each type of state, with random
values for their parameters chosen from an appropriate distribution.

Three files will be created in the `data` directory:

* `train.npz` containing the training data
* `test.npz` containing the test data
* `validation.npz` containing the validation data

The data is saved in a numpy format, and can be accessed as follows:

.. code-block:: python

    import numpy as np

    # Load the file
    training = np.load('data/train.npz')

    # Access the state data
    states = training['states']

    # Access the state labels - labels[i] corresponds to states[i]
    labels = training['labels']


--------------
Neural Network
--------------

To initialise the neural network, create an instance of the
:class:`~quoptics.network.NeuralNetwork` class:

.. code-block:: python

    from quoptics.network import NeuralNetwork

    net = NeuralNetwork(model_dir)

Where `model_dir` is a string containing the location of a directory. If the
directory does not exist, it will be created, and information about the trained
network will be saved there.

Training
========

To train the network run:

.. code-block:: python

    net.train(train_file, steps)

Where :code:`train_file` is the location of a file generated by
`data/gen_data.py` which contains the training data and labels. The learning
rate of the network can be set by changing the value of
:code:`net.learning_rate`.

Classifying States
==================

When classifying states of the form:

.. math::
    \lvert \psi \rangle = \sum_{n=0}^{\infty} c_n \lvert n \rangle

they should be input to the network in the form of a numpy array, whose entries
are the modulus of the coefficients :math:`c_n`.

The :class:`quoptics.states` module contains some functions for generating
some useful types of state. The functions generate :class:`qutip.Qobj`
instances. To convert these to a format compatible with the neural network, use
the :func:`quoptics.states.to_numpy` function.

To initialise the trained network, simply create the
:class:`~quoptics.network.NeuralNetwork` instance with the same model directory
that you used when training.

Once the network object has been created and the state data is in the correct
format, you can classify states using one of the following methods:

* :meth:`~quoptics.network.NeuralNetwork.classify`
* :meth:`~quoptics.network.NeuralNetwork.classify_dist`
* :meth:`~quoptics.network.NeuralNetwork.predict`

The integers labelling the classes are as follows:

+---------+---------------+
| Integer | Type of State |
+=========+===============+
|    0    |     Cat       |
+---------+---------------+
|    1    |    Zombie     |
+---------+---------------+
|    2    |  Squeezed Cat |
+---------+---------------+
|    3    |  Cubic Phase  |
+---------+---------------+
|    4    |      ON       |
+---------+---------------+
|    5    |    Useless    |
+---------+---------------+

There is an array that can be accessed at :code:`quoptics.states.TYPES` which
contains the names of each type of state at the index corresponding to their
class.

The :func:`~quoptics.network.NeuralNetwork.predict` function expects a numpy
array of states, and returns data in the same format as a
`Tensorflow Estimator
<https://www.tensorflow.org/api_docs/python/tf/estimator/DNNClassifier#predict>`_.
This is an array of dictionaries, where the nth dictionary corresponds to the
nth input state. These dictionaries have the following entries:

+---------------+------------------------------------------------------+
|      Key      |                        Value                         |
+===============+======================================================+
|    logits     | The values of the output layer of the neural network |
+---------------+------------------------------------------------------+
| probabilities | :code:`softmax(logits)` - The logits converted to a  |
|               | probability distribution                             |
+---------------+------------------------------------------------------+
|   class_ids   | An integer corresponding to the class that the state |
|               | has been classified as                               |
+---------------+------------------------------------------------------+
|    classes    | The :code:`class_id` as a string                     |
+---------------+------------------------------------------------------+


The :func:`~quoptics.network.NeuralNetwork.classify` function expects a single
state and returns the :code:`class_id` as an integer.

The :func:`~quoptics.network.NeuralNetwork.classify_dist` function expects a
single state and returns the :code:`probabilities` array.

------
States
------

The :any:`quoptics.states` module contains code for generating various types of
interesting states. The states available are:

* :func:`~quoptics.states.cat`
* :func:`~quoptics.states.zombie`
* :func:`~quoptics.states.squeezed_cat`
* :func:`~quoptics.states.cubic_phase`
* :func:`~quoptics.states.on_state`
* :func:`~quoptics.states.useless`

All of these functions return states in the form of a :class:`qutip.Qobj`. These
objects can be converted into a form acceptable by the neural network using
the :func:`~quoptics.states.to_numpy` function.

The :any:`quoptics.states` module also implements a
:class:`~quoptics.states.StateIterator` class, which is an iterator object that
generates random states. This is used by the script
`data/gen_data.py
<https://github.com/lewis-od/Quantum-Optics/blob/master/data/gen_data.py>`_ to
generate the training/test data for the network.

Instead of using the :class:`~quoptics.states.StateIterator` directly, it may be
more convenient to use the :func:`~quoptics.states.random_states` function,
which unpacks the iterator for you.
